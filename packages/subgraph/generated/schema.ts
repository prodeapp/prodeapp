// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Tournament extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("uri", Value.fromString(""));
    this.set("ownwer", Value.fromBytes(Bytes.empty()));
    this.set("closingTime", Value.fromBigInt(BigInt.zero()));
    this.set("creationTime", Value.fromBigInt(BigInt.zero()));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("manager", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tournament entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tournament entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tournament", id.toString(), this);
    }
  }

  static load(id: string): Tournament | null {
    return changetype<Tournament | null>(store.get("Tournament", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get ownwer(): Bytes {
    let value = this.get("ownwer");
    return value!.toBytes();
  }

  set ownwer(value: Bytes) {
    this.set("ownwer", Value.fromBytes(value));
  }

  get closingTime(): BigInt {
    let value = this.get("closingTime");
    return value!.toBigInt();
  }

  set closingTime(value: BigInt) {
    this.set("closingTime", Value.fromBigInt(value));
  }

  get creationTime(): BigInt {
    let value = this.get("creationTime");
    return value!.toBigInt();
  }

  set creationTime(value: BigInt) {
    this.set("creationTime", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get managementFee(): BigInt | null {
    let value = this.get("managementFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set managementFee(value: BigInt | null) {
    if (!value) {
      this.unset("managementFee");
    } else {
      this.set("managementFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get manager(): Bytes {
    let value = this.get("manager");
    return value!.toBytes();
  }

  set manager(value: Bytes) {
    this.set("manager", Value.fromBytes(value));
  }

  get players(): Array<string> {
    let value = this.get("players");
    return value!.toStringArray();
  }

  set players(value: Array<string>) {
    this.set("players", Value.fromStringArray(value));
  }

  get bets(): Array<string> {
    let value = this.get("bets");
    return value!.toStringArray();
  }

  set bets(value: Array<string>) {
    this.set("bets", Value.fromStringArray(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amountBeted", Value.fromBigInt(BigInt.zero()));
    this.set("pricesReceived", Value.fromBigInt(BigInt.zero()));
    this.set("tournaments", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Player entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountBeted(): BigInt {
    let value = this.get("amountBeted");
    return value!.toBigInt();
  }

  set amountBeted(value: BigInt) {
    this.set("amountBeted", Value.fromBigInt(value));
  }

  get pricesReceived(): BigInt {
    let value = this.get("pricesReceived");
    return value!.toBigInt();
  }

  set pricesReceived(value: BigInt) {
    this.set("pricesReceived", Value.fromBigInt(value));
  }

  get tournaments(): Array<string> {
    let value = this.get("tournaments");
    return value!.toStringArray();
  }

  set tournaments(value: Array<string>) {
    this.set("tournaments", Value.fromStringArray(value));
  }

  get bets(): Array<string> {
    let value = this.get("bets");
    return value!.toStringArray();
  }

  set bets(value: Array<string>) {
    this.set("bets", Value.fromStringArray(value));
  }
}

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("player", Value.fromString(""));
    this.set("tournament", Value.fromString(""));
    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("results", Value.fromBigIntArray(new Array(0)));
    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bet", id.toString(), this);
    }
  }

  static load(id: string): Bet | null {
    return changetype<Bet | null>(store.get("Bet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    return value!.toString();
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get tournament(): string {
    let value = this.get("tournament");
    return value!.toString();
  }

  set tournament(value: string) {
    this.set("tournament", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get ranking(): BigInt | null {
    let value = this.get("ranking");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ranking(value: BigInt | null) {
    if (!value) {
      this.unset("ranking");
    } else {
      this.set("ranking", Value.fromBigInt(<BigInt>value));
    }
  }

  get results(): Array<BigInt> {
    let value = this.get("results");
    return value!.toBigIntArray();
  }

  set results(value: Array<BigInt>) {
    this.set("results", Value.fromBigIntArray(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}
