// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewTournament extends ethereum.Event {
  get params(): NewTournament__Params {
    return new NewTournament__Params(this);
  }
}

export class NewTournament__Params {
  _event: NewTournament;

  constructor(event: NewTournament) {
    this._event = event;
  }

  get tournament(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TournamentFactory extends ethereum.SmartContract {
  static bind(address: Address): TournamentFactory {
    return new TournamentFactory("TournamentFactory", address);
  }

  allTournaments(): Array<Address> {
    let result = super.call(
      "allTournaments",
      "allTournaments():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_allTournaments(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "allTournaments",
      "allTournaments():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  arbitrator(): Address {
    let result = super.call("arbitrator", "arbitrator():(address)", []);

    return result[0].toAddress();
  }

  try_arbitrator(): ethereum.CallResult<Address> {
    let result = super.tryCall("arbitrator", "arbitrator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  realitio(): Address {
    let result = super.call("realitio", "realitio():(address)", []);

    return result[0].toAddress();
  }

  try_realitio(): ethereum.CallResult<Address> {
    let result = super.tryCall("realitio", "realitio():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  submissionTimeout(): BigInt {
    let result = super.call(
      "submissionTimeout",
      "submissionTimeout():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_submissionTimeout(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submissionTimeout",
      "submissionTimeout():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tournament(): Address {
    let result = super.call("tournament", "tournament():(address)", []);

    return result[0].toAddress();
  }

  try_tournament(): ethereum.CallResult<Address> {
    let result = super.tryCall("tournament", "tournament():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tournament(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateTournamentCall extends ethereum.Call {
  get inputs(): CreateTournamentCall__Inputs {
    return new CreateTournamentCall__Inputs(this);
  }

  get outputs(): CreateTournamentCall__Outputs {
    return new CreateTournamentCall__Outputs(this);
  }
}

export class CreateTournamentCall__Inputs {
  _call: CreateTournamentCall;

  constructor(call: CreateTournamentCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get closingTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get managementFee(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get manager(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class CreateTournamentCall__Outputs {
  _call: CreateTournamentCall;

  constructor(call: CreateTournamentCall) {
    this._call = call;
  }
}
