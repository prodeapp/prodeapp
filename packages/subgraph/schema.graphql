enum CurationStatus {
  """The Item is not in the registry"""
  Absent,
  """The item is in the registry."""
  Registered, 
  """The item has a request to be added to the registry."""
  RegistrationRequested,
  """The item has a request to be removed from the registry."""
  ClearingRequested
}

type Market @entity {
  id: ID!
  hash: String!
  name: String!
  category: String!
  closingTime: BigInt!
  creationTime: BigInt!
  resultSubmissionPeriodStart: BigInt!
  submissionTimeout: BigInt!
  price: BigInt!
  pool: BigInt!
  numOfBets: BigInt!
  managementFee: BigInt!
  protocolFee: BigInt!
  manager: Manager!
  creator: String!
  numOfEvents: BigInt!
  numOfEventsWithAnswer: BigInt!
  hasPendingAnswers: Boolean!
  prizes: [BigInt!]
  curated: Boolean!
  players: [Player!]! @derivedFrom(field: "markets")
  events: [Event!]! @derivedFrom(field: "market")
  bets: [Bet!]! @derivedFrom(field: "market")
  funders: [Funder!] @derivedFrom(field: "markets")
  attributions: [Attribution!]! @derivedFrom(field: "market")
}

type MarketCuration @entity {
  """Hash of the market"""
  id: ID!
  markets: [Market!]!
}

type CurateItem @entity {
  """itemID in curate"""
  id: ID!
  """Hash of the market"""
  hash: String!
  """Status in the curation. Enum with statuses"""
  status: CurationStatus!
  "The data describing the item (encoded)"
  data: Bytes!
  """The title of the item"""
  title: String!
  """the json file. empty if error"""
  json: String!
  timestamp: BigInt!
}

type Attribution @entity {
  id: ID!
  "Wallet that receives the attribution"
  provider: Player!,
  "Wallet that generate the attribution"
  attributor: Player!,
  "Amount to be paid to the provider"
  amount: BigInt!
  "Market where the attribution was generated"
  market: Market!
  "timestamp of the attribution"
  timestamp: BigInt!
}

type Event @entity {
  "questionID"
  id: ID!
  nonce: BigInt!
  arbitrator: Bytes!
  market: Market!
  answer: Bytes
  category: String!
  title: String!
  lang: String!
  outcomes: [String!]!
  answerFinalizedTimestamp: BigInt
  arbitrationOccurred: Boolean!
  isPendingArbitration: Boolean!
  openingTs: BigInt!
  finalizeTs: BigInt!
  timeout: BigInt!
  minBond: BigInt!
  lastBond: BigInt!
  bounty: BigInt!
  contentHash: Bytes!
  historyHash: Bytes!
  "List of questionIDs that this event it's reopening."
  reopenedEvents: [String!]!
}

type Player @entity {
  id: ID!
  amountBet: BigInt!
  pricesReceived: BigInt!
  markets: [Market!]!
  bets: [Bet!]! @derivedFrom(field: "player")
  numOfMarkets: BigInt!
  numOfBets: BigInt!
  attributions: [Attribution!]! @derivedFrom(field: "provider")
  totalAttributions: BigInt!
}

type Manager @entity {
  id: ID!
  markets: [Market!]!
  managementRewards: BigInt!
}

type Bet @entity {
  """marketId-tokenID"""
  id: ID!
  player: Player!
  market: Market!
  tokenID: BigInt!
  hash: Bytes!
  points: BigInt!
  results: [Bytes!]!
  count: BigInt!
  claim: Boolean!
  reward: BigInt!
  ranking: BigInt
}

type Funder @entity {
  id: ID!
  amount: BigInt!
  markets: [Market!]!
  messages: [String!]
}

type Registry @entity {
  "The registry address"
  id: ID!
  "The current registration meta evidence"
  registrationMetaEvidence: MetaEvidence!
  "The current removal meta evidence"
  clearingMetaEvidence: MetaEvidence!
  "The number of MetaEvidence event logs emitted."
  metaEvidenceCount: BigInt!
}

type MetaEvidence @entity {
  "The meta evidence ID."
  id: ID!
  "The URI of the meta evidence file."
  URI: String!
}
