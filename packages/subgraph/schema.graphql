enum CurationStatus {
  """The Item is not in the registry"""
  Absent,
  """The item is in the registry."""
  Registered, 
  """The item has a request to be added to the registry."""
  RegistrationRequested,
  """The item has a request to be removed from the registry."""
  ClearingRequested
}

type Tournament @entity {
  id: ID!
  hash: String!
  name: String!
  symbol: String!
  uri: String!
  owner: Bytes!
  closingTime: BigInt!
  creationTime: BigInt!
  resultSubmissionPeriodStart: BigInt!
  submissionTimeout: BigInt!
  price: BigInt!
  pool: BigInt!
  managementFee: BigInt
  manager: Manager!
  numOfMatches: BigInt!
  numOfMatchesWithAnswer: BigInt!
  hasPendingAnswers: Boolean!
  prizes: [BigInt!]
  players: [Player!]! @derivedFrom(field: "tournaments")
  matches: [Match!]! @derivedFrom(field: "tournament")
  bets: [Bet!]! @derivedFrom(field: "tournament")
  funders: [Funder!] @derivedFrom(field: "tournaments")
}

type TournamentCuration @entity {
  """itemID in curate"""
  id: ID!
  """Hash of the tournament"""
  hash: String!
  """Status in the curation. Enum with statuses"""
  status: CurationStatus!
  """ipfs route to the JSON with fields"""
  json: String
  """earliest timestamp"""
  startingTimestamp: BigInt
  "The data describing the item (encoded)"
  data: Bytes!
}

type Match @entity {
  "questionID"
  id: ID!
  questionID: Bytes!
  nonce: BigInt!
  tournament: Tournament!
  answer: Bytes
  answerFinalizedTimestamp: BigInt
  arbitrationOccurred: Boolean!
  isPendingArbitration: Boolean!
  openingTs: BigInt!,
  finalizeTs: BigInt!,
  timeout: BigInt!,
  minBond: BigInt!,
  contentHash: Bytes!
  historyHash: Bytes!
}

type Player @entity {
  id: ID!
  amountBet: BigInt!
  pricesReceived: BigInt!
  tournaments: [Tournament!]!
  bets: [Bet!]! @derivedFrom(field: "player")
  numOfTournaments: BigInt!
  numOfBets: BigInt!
}

type Manager @entity {
  id: ID!
  tournaments: [Tournament!]
  managementRewards: BigInt!
}

type Bet @entity {
  """tournamentId-tokenID"""
  id: ID!
  player: Player!
  tournament: Tournament!
  tokenID: BigInt!
  hash: Bytes!
  points: BigInt!
  results: [Bytes!]!
  count: BigInt!
  claim: Boolean!
  reward: BigInt!
}

type Funder @entity {
  id: ID!
  amount: BigInt!
  tournaments: [Tournament!]!
  messages: [String!]
}

type Registry @entity {
  "The registry address"
  id: ID!
  "The current registration meta evidence"
  registrationMetaEvidence: MetaEvidence!
  "The current removal meta evidence"
  clearingMetaEvidence: MetaEvidence!
  "The number of MetaEvidence event logs emitted."
  metaEvidenceCount: BigInt!
}

type MetaEvidence @entity {
  "The meta evidence ID."
  id: ID!
  "The URI of the meta evidence file."
  URI: String!
}